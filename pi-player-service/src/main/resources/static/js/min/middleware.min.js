







if(false){ //open dev

var SocketAbstract = function(url){
	this.socket = new SockJS(url);
	this.stompClient = Stomp.over(this.socket);
};
SocketAbstract.prototype.connect = function(fn){
	this.stompClient.connect({}, fn);
}
SocketAbstract.prototype.on = function(channel, fn){
	this.stompClient.subscribe(channel, fn(data));
}
var sck = new SocketAbstract(url);
sck.connect(function(frame){
	console.log('Connected: ' + frame);
	sck.on('/player/addSong', function(data){
		console.log(data);
		return JSON.parse(data.body).content;
	});
	
	stompClient.send('/app/addSong', {}, JSON.stringify({name: 'name'}));
});

Song = {
	id: 1,
	meta:{
		title: 'Somebody',
		artist: 'Avicii',
		duration: 129023, //in secs
		album: 'one',
		genre: 'classic'
	}
};
socket.on('playlistSent', function(data){
	curPlaylist = data.playlist;
});
socket.on('songsAdded', function(data){
	curPlaylist = data.playlist;
	curPlaylist.addSong()
});
socket.on('songsRemoved', function(data){
	curPlaylist = data.playlist;
});
socket.on('clientDisconnected', function(data){
	curPlaylist = data.playlist;
});
socket.on('uploadSong', function(data){
//	upload the song from the storage to the server
	var fReader = new FileReader();

	fReader.onload = function(e){
		socket.emit('upload', {songID: data.song.id, data: e.target.result});
	}
	
	cStore.load(data.song.id, function(file){
		fReader.readAsBinaryString(file);
	});
});
socket.on('songPlaying', function(data){
	curPlaylist = data.playlist;
});
socket.on('songPaused');
socket.on('songStopped');


socket.emit('getPlaylist', {});
socket.emit('addSong', {client: curClient, song: new Song('blob')});
socket.emit('removeSong', {client: curClient, song: playlist.getSong(anID)});
socket.emit('playCurrent', {client: curClient});
socket.emit('pauseCurrent', {client: curClient});
socket.emit('stopCurrent');
socket.emit('previousSong');
socket.emit('nextSong');
socket.emit('reorderPlaylist', {client: curClient, playlist: rePlaylist});
	
	
var stompClient = null;

function setConnected(connected) {
//		document.getElementById('connect').disabled = connected;
//		document.getElementById('disconnect').disabled = !connected;
//		document.getElementById('conversationDiv').style.visibility = connected ? 'visible' : 'hidden';
//		document.getElementById('response').innerHTML = '';
}

function connect() {
		var socket = new SockJS('/hello');
		stompClient = Stomp.over(socket);            
		stompClient.connect({}, function(frame) {
				setConnected(true);
				console.log('Connected: ' + frame);
				stompClient.subscribe('/topic/greetings', function(greeting){
						return JSON.parse(greeting.body).content;
				});
		});
}

function disconnect() {
		stompClient.disconnect();
		setConnected(false);
		console.log("Disconnected");
}

function sendName() {
		var name = document.getElementById('name').value;
		stompClient.send("/app/hello", {}, JSON.stringify({ 'name': name }));
}
	
//close dev	
}
(function($) {
 
  var o = $({});
 
  $.subscribe = function() {
    o.on.apply(o, arguments);
  };
 
  $.unsubscribe = function() {
    o.off.apply(o, arguments);
  };
 
  $.publish = function() {
    o.trigger.apply(o, arguments);
  };
 
}(jQuery));

var guid = function(){
	return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
		var r = Math.random()*16|0, v = c === 'x' ? r : (r&0x3|0x8);
		return v.toString(16);
	});
};

var render = function(template, data){
	/* Nano Templates (Tomasz Mazur, Jacek Becela) */
	return template.replace(/\{([\w\.]*)\}/g, function(str, key) {
		var keys = key.split("."), v = data[keys.shift()];
		for (var i = 0, l = keys.length; i < l; i++) v = v[keys[i]];
		return (typeof v !== "undefined" && v !== null) ? v : "";
	});
}

var $listContainer = $('.list-container');
var $controlsContainer = $('.playlist-controls');
var $nowPlayingContainer = $('.now-playing');
var $meter = $('.meter');
var $currentTime = $('.current-time');
var $songTime = $('.song-time');
var $addButton = $('.add-button');
var $playButton = $('.control.play');
var $pauseButton = $('.control.pause');
var $prevButton = $('.control.backward');
var $nextButton = $('.control.forward');
var $artistDetails = $('.artist-details');
var songItemTemplate = '<li class="song row" data-id="{id}"><span class="small-4 columns song-title ellipsis">{title}</span><span class="small-4 columns song-length text-center">{duration}</span><span class="small-4 columns song-artist ellipsis">{artist}</span></li>';
// Allow for vendor prefixes.
window.requestFileSystem = window.requestFileSystem ||
                           window.webkitRequestFileSystem;
var ClientStore = function(){
	if (window.requestFileSystem){
		var self = this;
		self.filesystem = null;
		
		navigator.webkitPersistentStorage.requestQuota(1024 * 1024 * 300, function(grantedSize) {
			// Request a file system with the new size.
			window.requestFileSystem(window.TEMPORARY, grantedSize, function(fs) {
				// Set the filesystem variable.
				self.filesystem = fs;

				// Setup event listeners on the form.
//				setupFormEventListener();

				// Update the file browser.
				self.getList();

			}, self.errorHandler);

		}, self.errorHandler);
	}
	else{
		console.error('Sorry! Your browser doesn\'t support the FileSystem API :(');
	}
};
ClientStore.prototype.errorHandler = function(error){
	var message = '';
	switch (error.code) {
		case FileError.SECURITY_ERR:
			message = 'Security Error';
			break;
		case FileError.NOT_FOUND_ERR:
			message = 'Not Found Error';
			break;
		case FileError.QUOTA_EXCEEDED_ERR:
			message = 'Quota Exceeded Error';
			break;
		case FileError.INVALID_MODIFICATION_ERR:
			message = 'Invalid Modification Error';
			break;
		case FileError.INVALID_STATE_ERR:
			message = 'Invalid State Error';
			break;
		default:
			message = 'Unknown Error';
			break;
	}
	console.log(message);
};
ClientStore.prototype.save = function(filename, content, mimeType){
	var self = this;
	var mType = mimeType || 'audio/mpeg'; //'text/plain'
	
	self.filesystem.root.getFile(filename, {create: true}, function(fileEntry) {

    fileEntry.createWriter(function(fileWriter) {

      fileWriter.onwriteend = function(e) {
        // Update the file browser.
        self.getList();
				console.log(filename + ' saved.');
      };

      fileWriter.onerror = function(e) {
        console.error('Write error: ' + e.toString());
      };
      var contentBlob = new Blob([content], {type: mType});

      fileWriter.write(contentBlob);
    }, self.errorHandler);

  }, self.errorHandler);
};
ClientStore.prototype.load = function(filename, fn) {
	var self = this;
	fn = fn || function(){};
  self.filesystem.root.getFile(filename, {}, function(fileEntry) {
    fileEntry.file(function(file) {
			fn(file);
    }, self.errorHandler);
  }, self.errorHandler);
};
ClientStore.prototype.delete = function(filename, fn) {
	var self = this;
	fn = fn || function(){};
  self.filesystem.root.getFile(filename, {create: false}, function(fileEntry) {

    fileEntry.remove(function(e) {
      // Update the file browser.
      self.getList();
			fn(true);
    }, self.errorHandler);

  }, self.errorHandler);
};
ClientStore.prototype.getList = function(fn){
	var self = this;
	fn = fn || function(){};
  var dirReader = self.filesystem.root.createReader();
  var entries = [];

  var fetchEntries = function() {
    dirReader.readEntries(function(results) {
      if (!results.length) {
				fn(entries);
				return entries;
      } else {
        entries = entries.concat(results);
        fetchEntries();
      }
    }, self.errorHandler);
  };

  fetchEntries();
};

var cStore = new ClientStore();
var Client = function(data){
	this.id = 'c' + guid();
	this.isAdmin = false;
	$controlsContainer.hide();
	if(data){
		if(data.isAdmin)$controlsContainer.show();
	}
};

var curClient = new Client();
var Song = function(file, fn){
	var self = this;
	this.id = 's' + guid();
	if(file && file.id){
//		file from the server
		this.id = file.id;
		this.title = file.title || 'Unknown';
		this.album = file.album || 'Unknown';
		this.artist = file.artist || 'Unknown';
		this.genre = file.genre || 'Unknown';
		this.duration = file.duration || 0;
		this.year = file.year || 'Unknown';
	}
	else if(file){
//		new file from me
		this.file = file;
		this.getMeta(file, function(meta){
			self.meta = meta;
			self.title = meta.title || 'Unknown';
			self.album = meta.album || 'Unknown';
			self.artist = meta.artist || 'Unknown';
			self.genre = meta.genre || 'Unknown';
			self.duration = meta.duration;
			self.year = meta.year || 'Unknown';
			if(fn)fn.apply(self, [meta]);
		});
		cStore.save(this.id, this.getFile());
	}
};
Song.prototype.getMeta = function(file, fn){
	var meta = {};
	console.log(file);
	id3(file, function(err, tags) {
		// tags now contains your ID3 tags
		if(!err){
			meta.title = tags.title || tags.v2.title;
			meta.album = tags.album || tags.v2.album;
			meta.artist = tags.artist || tags.v2.artist;
			meta.genre = tags.genre || tags.v2.genre;
			meta.duration = tags.duration || tags.v2.duration;
			meta.year = tags.year || tags.v2.year;
	//		meta.albumArt = tags.v2.image

			if(!meta.duration){
				var objectUrl;
				objectUrl = URL.createObjectURL(file);
				var tempAudioObj = document.createElement('audio');
				tempAudioObj.addEventListener('canplaythrough', function(e){
					meta.duration = e.currentTarget.duration;
//					console.log(e.currentTarget.duration);
					URL.revokeObjectURL(objectUrl);
					fn(meta);
				});
				tempAudioObj.setAttribute('src', objectUrl);
			}
			else{
				fn(meta);
			}
			
		}
		else{
			console.log(err);
		}
	});
	return meta;
};
Song.prototype.getID = function(){
	return this.id;
};
Song.prototype.getFile = function(){
	return this.file;
};
Song.prototype.toJSON = function(){
	var songObj = {
		id: this.id,
		title: this.meta.title,
		album: this.meta.album,
		artist: this.meta.artist,
		genre: this.meta.genre,
		duration: this.meta.duration,
		year: this.meta.year
	};
	
	return songObj;
};
var Playlist = function(playlist){
	var self = this;
	this.songs = [];
	this.currentSongID = 0;
	this.elapsedTime = 0;
	this.totalSongTime = 0;
	this.currentEpochTime = new Date();
	this.isPlaying = false;
	this.playInterval = null;
	$listContainer.empty();
	$currentTime.hide();
	$songTime.hide();
	$nowPlayingContainer.hide();
	if(playlist){
		playlist.songs.forEach(function(elem){
			var el = new Song(elem);
			self.songs.push(el);
			self.renderSong(el);
		});
		this.currentSongID = playlist.currentSongID;
		this.isPlaying = !!playlist.isPlaying;
		this.setPlaying(this.currentSongID);
		this.setControlsUI();
	}
};
Playlist.prototype.getSong = function(id){
	return this.songs.filter(function(a){
		return a.getID() == id;
	})[0];
};
Playlist.prototype.addSong = function(song){
	var self = this;
	if(song instanceof Array){
//		this.songs.concat(song);
		song.forEach(function(song){
			self.songs.push(song);
			self.renderSong(song);
		});
	}
	else{
		self.songs.push(song);
		self.renderSong(song);
	}
};
Playlist.prototype.renderSong = function(song){
	var getDuration = function(duration){
		var dWhole = Math.floor(song.duration / 60);
		var dRem = '' + Math.round(((song.duration/60) - dWhole)*60);
		dRem = (dRem.length<2)? '0' + dRem: dRem;
		return dWhole + ':' + dRem;
	}
	song.duration = getDuration(song.duration);
	$listContainer.append(render(songItemTemplate, song));
};
Playlist.prototype.setPlaying = function(id, playing){
	this.isPlaying = playing || this.isPlaying;
	this.currentSongID = id;
	this.setControlsUI();
};
Playlist.prototype.setControlsUI = function(){
	if(this.isPlaying){
		$nowPlayingContainer.show();
//		$artistDetails.hide();
		$playButton.hide();
		$pauseButton.show();
	}
	else{
		$nowPlayingContainer.hide();
//		$artistDetails.hide();
		$playButton.show();
		$pauseButton.hide();
	}
	if(this.currentSongID){
//		this.updateSongUI()
		var curSong = this.getSong(this.currentSongID);
		console.log(curSong);
		$artistDetails.find('.song-title .detail').html((curSong)?curSong.title: '');
		$artistDetails.find('.artist-name .detail').html((curSong)?curSong.artist : '');
		$artistDetails.find('.album-details .detail').html((curSong)?curSong.album : '');
		$listContainer.find('[data-id="' + this.currentSongID + '"]').siblings().removeClass('playing').end().addClass('playing');
	}
};
var curPlaylist = new Playlist();
//var base = 'http://192.168.43.49:8080';
var base = '';
var url = base + '/hello';
var socket = new SockJS(url);

$.getJSON(base + '/songs/index', function(data){
	console.log(data);
	curPlaylist = new Playlist(data);
});

stompClient = Stomp.over(socket);            
stompClient.connect({}, function(frame) {
	stompClient.subscribe('/player/songAdded', function(data){
		var result = JSON.parse(data.body);
		console.log(result);
		
		curPlaylist.addSong(new Song(result));
	});
	stompClient.subscribe('/player/songRemoved', function(data){
		var result = JSON.parse(data.body); 
		return result.content;
	});
	stompClient.subscribe('/player/clientDisconnected', function(data){
		var result = JSON.parse(data.body); 
		return result.content;
	});
	stompClient.subscribe('/player/songProgress', function(data){
		var result = JSON.parse(data.body);
		$meter.width(result.percentage + '%');
		return result.content;
	});
	stompClient.subscribe('/player/uploadSong', function(data){
		var result = JSON.parse(data.body);
		var uploadData = new FormData();
		uploadData.append('id', result.songID);
		uploadData.append('file', curPlaylist.getSong(result.songID));
		$.ajax({
			url: base + 'songs/upload',
			data: uploadData,
			cache: false,
			contentType: false,
			processData: false,
			type: 'POST',
			success: function(data){
				console.log(data);
			}
		});
		return result.content;
	});
	stompClient.subscribe('/player/songPlaying', function(data){
		var result = JSON.parse(data.body);
		curPlaylist.setPlaying(result.songId, true);
		return result.content;
	});
	stompClient.subscribe('/player/songPaused', function(data){
		var result = JSON.parse(data.body); 
		curPlaylist.setPlaying(result.id, false);
		return result.content;
	});
	stompClient.subscribe('/player/songStopped', function(data){
		var result = JSON.parse(data.body); 
		return result.content;
	});
	
	
//	stompClient.send('/app/addSong', {}, JSON.stringify({name: 'name'}));
});

//socket.on('playlistSent', function(data){
//	curPlaylist = data.playlist;
//});


$.subscribe('addedSong', function(e, data){
//	var songs = [];
	console.log(data);
//	for(var i = 0; i < data.files.length; i++){
//		songs.push(new Song(data.files[i], function(){
//			this.toJSON();
//			console.log(this.meta);
//		}));
//	}
	
	var song = new Song(data.files[0], function(){
		console.log(this.toJSON());
		stompClient.send('/app/addSong', {}, JSON.stringify(this.toJSON()));
		var uploadData = new FormData();
		uploadData.append('id', this.id);
		uploadData.append('file', this.file);
		$.ajax({
			url: base + 'songs/upload',
			data: uploadData,
			cache: false,
			contentType: false,
			processData: false,
			type: 'POST',
			success: function(data){
				console.log(data);
			}
		});
//		$.post(base + 'songs/upload', uploadData);
		
	});
//	var song = new Song(data.file);
});
$.subscribe('removeSong', function(e, data){
	stompClient.send('/app/removeSong', {}, JSON.stringify({id: song.id}));
});
$.subscribe('playSong', function(e, data){
	stompClient.send('/app/playSong', {}, JSON.stringify({}));
});
$.subscribe('pauseSong', function(e, data){
	stompClient.send('/app/pauseSong', {}, JSON.stringify({}));
});
$.subscribe('stopSong', function(e, data){
	stompClient.send('/app/stopSong', {}, JSON.stringify({}));
});
$.subscribe('previousSong', function(e, data){
	stompClient.send('/app/previousSong', {}, JSON.stringify({}));
});
$.subscribe('nextSong', function(e, data){
	stompClient.send('/app/nextSong', {}, JSON.stringify({}));
});
$.subscribe('reorderPlaylist', function(e, data){
	stompClient.send('/app/reorderPlaylist', {}, JSON.stringify({}));
});
//socket.emit('getPlaylist', {});



$addButton.on('change', function(e){
	$.publish('addedSong', {files: e.target.files});
});

//$listContainer.on('click', '.remove-item', function(e){
//	$.publish('removeSong', {songID: $(this).data('id')});
//});
$playButton.on('click', function(e){
	e.preventDefault();
	$.publish('playSong');
});
$pauseButton.on('click', function(e){
	e.preventDefault();
	$.publish('pauseSong');
});
$prevButton.on('click', function(e){
	e.preventDefault();
	$.publish('previousSong');
});
$nextButton.on('click', function(e){
	e.preventDefault();
	$.publish('nextSong');
});